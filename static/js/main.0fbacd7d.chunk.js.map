{"version":3,"sources":["components/ChatItem/ChatItem.module.css","components/DataEntry/DataEntry.module.css","components/СhatList/ChatList.module.css","components/ChatUser/ChatUser.module.css","components/LastMessage/LastMessage.module.css","components/ChatBoard/ChatBoard.module.css","components/ChatAnswer/ChatAnswer.module.css","components/Title/Title.module.css","components/Sidebar/Sidebar.module.css","components/TextField/TextField.module.css","components/Wrapper/Wrapper.module.css","components/UserSearch/UserSearch.js","components/Title/Title.js","utils/findContact.js","components/LastMessage/LastMessage.js","components/ChatUser/ChatUser.js","components/СhatList/ChatList.js","Hooks/UseLocalStorage.js","components/Sidebar/Sidebar.js","components/ChatBoard/ChatBoard.js","utils/normalizeData.js","Api/localApi.js","Api/localApiPut.js","components/ChatMessage/ChatMessage.js","components/ChatAnswer/ChatAnswer.js","components/ChatItem/ChatItem.js","Api/Api.js","components/DataEntry/DataEntry.js","components/TextField/TextField.js","components/Wrapper/Wrapper.js","App.js","reportWebVitals.js","index.js","components/UserSearch/UserSearch.module.css","components/ChatMessage/ChatMessage.module.css"],"names":["module","exports","UserSearch","value","onChange","className","s","section","thumb","search","searchEntry","type","name","placeholder","Title","title","findContact","word","array","normalizetext","toLowerCase","filter","contact","senderName","includes","LastMessage","last","useState","message","changeMes","useEffect","console","log","messageText","answerText","createdAt","String","length","slice","normaliseMessage","date","ChatUser","config","avatar","dialogue","icon","src","process","alt","info","ChatList","searchUser","onSubmit","user","setUser","axios","get","then","response","data","forEach","res","catch","error","handID","e","currentTarget","id","visibleContact","list","map","item","onClick","shortid","generate","useLocalStorage","key","defaultValue","JSON","parse","window","localStorage","getItem","state","setState","setItem","stringify","Sidebar","saveID","currentId","setId","setFilter","aside","userId","ChatBoard","infoBord","normalizeData","Date","moment","format","localApi","query","newMessage","put","ChatMessage","ChatAnswer","answer","answerDate","ChatItem","chucknorrisTalk","useRef","dialogues","setDialogues","localApiPut","status","setTimeout","fetch","ok","json","Promise","reject","Error","current","normalizeText","toast","success","dispatchedMessage","DataEntry","setValue","formMessage","preventDefault","dataEntry","target","button","TextField","tranferID","TextFieldMessage","saveMessage","Wrapper","container","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0fbacd7d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"thumb\":\"ChatItem_thumb__1Krso\",\"list\":\"ChatItem_list__1mDp1\",\"item\":\"ChatItem_item__2PmsF\",\"dispatchedMessage\":\"ChatItem_dispatchedMessage__1uyiF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formMessage\":\"DataEntry_formMessage__rGXSo\",\"dataEntry\":\"DataEntry_dataEntry__1gg5X\",\"button\":\"DataEntry_button__1Y2X7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ChatList_list__3xhqF\",\"item\":\"ChatList_item__36jns\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"icon\":\"ChatUser_icon__2i8Mj\",\"info\":\"ChatUser_info__2Lbs8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"LastMessage_message__Z_J7c\",\"date\":\"LastMessage_date__1twHD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"infoBord\":\"ChatBoard_infoBord__3Kh17\",\"avatar\":\"ChatBoard_avatar__3wSwJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"answerDate\":\"ChatAnswer_answerDate__1763x\",\"answer\":\"ChatAnswer_answer__kex31\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Title_title__TU5kK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"aside\":\"Sidebar_aside__1QX09\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"TextField_section__2t9TJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Wrapper_container__1_U2Q\"};","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { FaUserAlt, FaSearch } from \"react-icons/fa\";\nimport s from \"./UserSearch.module.css\";\n\nexport default function UserSearch({ value, onChange }) {\n  return (\n    <section className={s.section}>\n      <div className={s.thumb}>\n        <FaUserAlt />\n      </div>\n      <label className={s.search}>\n        <FaSearch />\n        <input\n          className={s.searchEntry}\n          type=\"text\"\n          name=\"filter\"\n          value={value}\n          onChange={onChange}\n          placeholder=\"Search or start new chat\"\n        />\n      </label>\n    </section>\n  );\n}\n\nUserSearch.propTypes = {\n  value: PropTypes.string,\n};\n","import React from \"react\";\r\nimport s from \"./Title.module.css\";\r\n\r\nexport default function Title() {\r\n  return <h2 className={s.title}>Chats</h2>;\r\n}\r\n","  const findContact = (word, array) => {\r\n    const normalizetext = word.toLowerCase();\r\n\r\n    if (array) {\r\n      return array.filter((contact) =>\r\n        contact.senderName.toLowerCase().includes(normalizetext)\r\n      );\r\n    }\r\n};\r\n  \r\nexport default findContact ;","import React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport s from \"./LastMessage.module.css\";\n\nexport default function LastMessage({ last }) {\n  const [message, changeMes] = useState(\"\");\n\n  useEffect(() => {\n    console.log('im change last message');\n    changeMes(last);\n  }, []);\n\n  const normaliseMessage = (message) => {\n    if (String(message).length > 40) {\n      return ` ${String(message).slice(0, 50)}... `;\n    } else return message;\n  };\n\n  const { messageText, answerText, createdAt } = message;\n\n  return (\n    <p className={s.message}>\n      {normaliseMessage(messageText || answerText)}\n      <span className={s.date}>{createdAt}</span>\n    </p>\n  );\n}\n\nLastMessage.propTypes = {\n  last: PropTypes.shape({}),\n};\n","import React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport s from \"./ChatUser.module.css\";\nimport LastMessage from \"../LastMessage/LastMessage\";\n\nexport default function ChatUser({ config }) {\n  const { avatar, senderName, dialogue } = config;\n\n  return (\n    <>\n      <img\n        className={s.icon}\n        src={process.env.PUBLIC_URL + avatar}\n        alt=\"avatar\"\n      />\n\n      <div className={s.info}>\n        <p>{senderName}</p>\n\n        {senderName && <LastMessage last={dialogue[dialogue.length - 1]} />}\n      </div>\n    </>\n  );\n}\n\nChatUser.propTypes = {\n  config: PropTypes.shape({}),\n};\n","import React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport shortid from \"shortid\";\nimport axios from \"axios\";\nimport s from \"./ChatList.module.css\";\nimport findContact from '../../utils/findContact';\nimport ChatUser from \"../ChatUser/ChatUser\";\n\nconst BASE_URL = \"http://localhost:3000/messages\";\n\nexport default function ChatList({ searchUser, onSubmit }) {\n  const [user, setUser] = useState(\"\");\n\n  useEffect(() => {\n    axios\n      .get(`${BASE_URL}`)\n      .then(function (response) {\n        response.data.forEach((res) => {\n          setUser((user) => [...user, res]);\n        });\n      })\n      .catch(function (error) {\n        // handle error\n        console.log(\"error from json server\", error);\n      });\n  }, []);\n\n  const handID = (e) => {\n    onSubmit(e.currentTarget.id);\n  };\n\n  let visibleContact = searchUser.length === 0 ? user : findContact(searchUser, user );\n\n  return (\n    <ul className={s.list}>\n      {user &&\n        visibleContact.map((config) => {\n          return (\n            <li\n              className={s.item}\n              key={shortid.generate()}\n              id={config.id}\n              onClick={handID}\n            >\n              <ChatUser config={config} />\n            </li>\n          );\n        })}\n    </ul>\n  );\n}\n\nChatList.propTypes = {\n  searchUser: PropTypes.string,\n};\n","import { useEffect, useState } from \"react\";\r\n\r\nconst useLocalStorage = (key, defaultValue) => {\r\n  const [state, setState] = useState(() => {\r\n    return JSON.parse(window.localStorage.getItem(key)) ?? defaultValue;\r\n  });\r\n\r\n  useEffect(() => {\r\n    window.localStorage.setItem(key, JSON.stringify(state));\r\n  }, [key, state]);\r\n\r\n  return [state, setState];\r\n};\r\n\r\nexport default useLocalStorage;\r\n","import React, { useEffect } from \"react\";\n\nimport UserSearch from \"../UserSearch/UserSearch\";\nimport Title from \"../Title/Title\";\nimport ChatList from \"../СhatList/ChatList\";\nimport useLocalStorage from \"../../Hooks/UseLocalStorage\";\nimport s from \"./Sidebar.module.css\";\n\nexport default function Sidebar({ saveID }) {\n  const [currentId, setId] = useLocalStorage(\"currentId\", \"\");\n  const [filter, setFilter] = useLocalStorage(\"filter\", \"\");\n\n  useEffect(() => {\n    saveID(currentId);\n  }, [currentId, saveID]);\n\n  const handleClick = (userId) => setId(userId);\n\n  const changeFilter = (e) => {\n    const { value } = e.currentTarget;\n    setFilter(value);\n  };\n\n  return (\n    <aside className={s.aside}>\n      <UserSearch value={filter} onChange={changeFilter} />\n      <Title />\n      <ChatList onSubmit={handleClick} searchUser={filter} />\n    </aside>\n  );\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport s from \"./ChatBoard.module.css\";\n\nexport default function ChatBoard({ avatar, name }) {\n\n  return (\n    <div className={s.infoBord}>\n      <img className={s.avatar} src={process.env.PUBLIC_URL + avatar} alt=\"avatar\" />\n      <p>{name}</p>\n    </div>\n  );\n}\n\nChatBoard.propTypes = {\n  avatar: PropTypes.string,\n  name: PropTypes.string,\n};\n","import moment from \"moment\";\r\n\r\nexport default function normalizeData () {\r\n    const data = new Date();\r\n    return `${moment(data).format(\"l\")} ${moment(data).format(\r\n      \"LT\"\r\n    )}`;\r\n};\r\n\r\n","\r\n\r\nimport axios from \"axios\";\r\n\r\nexport default function localApi (query) {\r\n\r\n    const BASE_URL = \"http://localhost:3000/messages\";\r\n    const defaultID = `WYZpppK7Js`;\r\n\r\n     \r\n    return axios\r\n        .get(`${BASE_URL}?id=${query=== '' ? defaultID : query}`)\r\n        .then(function (response) {\r\n        // handle success\r\n\r\n            // console.log(response); \r\n             \r\n             return response;\r\n\r\n\r\n        // setData(response.data[0].dialogue);\r\n        // setName(response.data[0].senderName);\r\n        // setAvatar(response.data[0].avatar);\r\n         })\r\n        .catch(function (error) {\r\n        // handle error\r\n        console.log(\"error from json server\", error);\r\n      });\r\n\r\n};\r\n\r\n","import axios from \"axios\";\r\n\r\nexport default function localApi(user, newMessage) {\r\n    \r\n    console.log(user);\r\n    \r\n    const {id, senderName, avatar, dialogue} = user\r\n    const BASE_URL = \"http://localhost:3000/messages\";\r\n    const defaultID = `WYZpppK7Js`;\r\n\r\n     \r\n    return axios\r\n           .put(`${BASE_URL}/${  id || defaultID }/`, {\r\n          id: id,\r\n          avatar: avatar,\r\n          senderName: senderName,\r\n          dialogue: [...dialogue, newMessage],\r\n        })\r\n        \r\n        .then(function (response) {\r\n             return response;\r\n         })\r\n        .catch(function (error) {\r\n        // handle error\r\n        console.log(\"error from json server\", error);\r\n      });\r\n\r\n};\r\n","import React, { Fragment } from \"react\";\nimport s from \"./ChatMessage.module.css\";\n\nexport default function ChatMessage({ avatar, message, date }) {\n  return (\n    <>\n      <div className={s.thumb}>\n        {\" \"}\n        <img\n          className={s.avatar}\n          src={process.env.PUBLIC_URL + avatar}\n          alt=\"avatar\"\n        />\n        <p className={s.message}>{message}</p>\n      </div>\n      <span className={s.date}>{date}</span>\n    </>\n  );\n}\n","import React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport s from \"./ChatAnswer.module.css\";\n\nexport default function ChatAnswer({ answer, date }) {\n  return (\n    <>\n      <p className={s.answer}>{answer}</p>\n      <span className={s.answerDate}>{date}</span>\n    </>\n  );\n}\n\nChatAnswer.propTypes = {\n  answer: PropTypes.string,\n  date: PropTypes.string,\n};\n","//------base\nimport React, { Fragment, useEffect, useRef, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport shortid from \"shortid\";\n//------styles\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport s from \"./ChatItem.module.css\";\nimport normalizeData from \"../../utils/normalizeData\";\n//------api\nimport Api from \"../../Api/Api\";\nimport localApi from '../../Api/localApi';\nimport localApiPut from '../../Api/localApiPut';\n//------components\nimport ChatMessage from \"../ChatMessage/ChatMessage\";\nimport ChatAnswer from \"../ChatAnswer/ChatAnswer\";\n\nexport default function ChatItem({ newMessage, user }) {\n\n  const chucknorrisTalk = useRef();\n  const {id, senderName, avatar, ...props} = user;\n  const [dialogues, setDialogues] = useState([]);\n\n  useEffect(() => {\n\n    //---render user  \n    localApi(id)\n      .then(response => {\n        console.log('im changed chatItem');\n         setDialogues(response.data[0].dialogue);\n       })\n    \n  }, [user]);\n   \n  useEffect(() => {\n\n    //--- save my message in bd and state\n    if (newMessage !== \"\" && newMessage.answerText !== \"\") {\n      console.log(dialogues);\n          localApiPut(user, newMessage)\n         .then((response) => {\n           if (response.status === 200) {\n             setDialogues((dialogues) => [...dialogues, newMessage]);\n           }\n         });\n      \n      //-- wait answer Chack Norris\n      setTimeout(() => {\n        Api()\n          .then((res) => {\n            chucknorrisTalk.current = res;\n            const { value } = chucknorrisTalk.current;\n            const normalizeText = { messageText: value, createdAt: normalizeData() };\n\n      //--save answer  Chack Norris\n              localApiPut(user, normalizeText)\n                .then((response) => {\n\n                  if (response.status === 200) {\n                    toast.success(\" Chuck Norris talk ...\");\n                    setDialogues((dialogues) => [\n                      ...dialogues,\n                      normalizeText,\n                    ]);\n                  }\n               });\n           })\n        \n      }, 15000);\n    }\n  }, [newMessage]);\n\n   return (\n     <>\n       <ul className={s.list}>\n         {dialogues && dialogues.map((item) => {\n          let { messageText, answerText, createdAt } = item;\n\n           return (\n             <li\n               className={`${s.item} ${answerText && s.dispatchedMessage}`}\n               key={shortid.generate()}\n             >\n              {messageText ? (\n                 <ChatMessage\n                   avatar={avatar}\n                   message={messageText}\n                   date={createdAt}\n                 />\n               ) : (\n                 <ChatAnswer answer={answerText} date={createdAt} />\n               )}\n             </li>\n           );\n         })}\n       </ul>\n     </>\n   );\n}\n\nChatItem.propTypes = {\n  idChat: PropTypes.string,\n};\n","export default function Api() {\r\n  const BASE_URL = `https://api.chucknorris.io/jokes/random`;\r\n\r\n  return fetch(BASE_URL).then((response) => {\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    return Promise.reject(new Error(` Something wrong :( `));\r\n  });\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { IoMdSend } from \"react-icons/io\";\r\nimport s from \"./DataEntry.module.css\";\r\n\r\nexport default function DataEntry({ onChange }) {\r\n  const [message, setValue] = useState(\"\");\r\n\r\n  const reset = () => {\r\n    setValue(\"\");\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const { value } = e.target;\r\n\r\n    setValue(value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    onChange(message);\r\n    reset();\r\n  };\r\n\r\n  return (\r\n    <form className={s.formMessage} onSubmit={handleSubmit}>\r\n      <input\r\n        className={s.dataEntry}\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        value={message}\r\n        onChange={handleChange}\r\n        placeholder=\"Type your message\"\r\n      />\r\n      <button className={s.button} type=\"submit\">\r\n        <IoMdSend />\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n","//------base\nimport React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\n//------components\nimport ChatBoard from \"../ChatBoard/ChatBoard\";\nimport ChatItem from \"../ChatItem/ChatItem\";\nimport DataEntry from \"../DataEntry/DataEntry\";\nimport localApi from '../../Api/localApi';\nimport normalizeData from \"../../utils/normalizeData\";\n//------styles\n\nimport s from \"./TextField.module.css\";\n\n\nexport default function TextField({ tranferID }) {\n  const [TextFieldMessage, saveMessage] = useState(\"\");\n  const [user, setUser] = useState({});\n  const { senderName, avatar } = user;\n \n  useEffect(() => {\n    \n    localApi(tranferID)\n      .then(response => {\n        console.log('im changed textfield');   \n        setUser(response.data[0]);\n       })\n    \n  }, [tranferID]);\n\n  const sendMessage = (value) => {\n    saveMessage({ answerText: value, createdAt: normalizeData() });\n  };\n\n  return (\n    <section className={s.section}>\n      <ChatBoard avatar={avatar} name={senderName} /> \n      <ChatItem user={user} newMessage={TextFieldMessage} />\n      <DataEntry onChange={sendMessage} />\n    </section>\n  );\n}\n\nTextField.propTypes = {\n  tranferID: PropTypes.string,\n};\n","import React from \"react\";\r\nimport Sidebar from \"../Sidebar/Sidebar\";\r\nimport TextField from \"../TextField/TextField\";\r\nimport useLocalStorage from \"../../Hooks/UseLocalStorage\";\r\nimport s from \"./Wrapper.module.css\";\r\n\r\nexport default function Wrapper() {\r\n  const [currentId, setId] = useLocalStorage(\"currentId\", \"\");\r\n\r\n  const handleSubmit = (userId) => setId(userId);\r\n\r\n  return (\r\n    <section className={s.container}>\r\n      <Sidebar saveID={handleSubmit} />\r\n      <TextField tranferID={currentId } />\r\n    </section>\r\n  );\r\n}\r\n","import \"./App.css\";\nimport { ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport Wrapper from \"./components/Wrapper/Wrapper\";\n\nfunction App() {\n  return (\n    <>\n      <Wrapper />\n      <ToastContainer />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"UserSearch_section__1BCrP\",\"thumb\":\"UserSearch_thumb__2r6rg\",\"search\":\"UserSearch_search__DTHtL\",\"searchEntry\":\"UserSearch_searchEntry__7PZCR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"thumb\":\"ChatMessage_thumb__2MWaP\",\"avatar\":\"ChatMessage_avatar__1f-NZ\",\"date\":\"ChatMessage_date__3Oc1L\",\"message\":\"ChatMessage_message__3sxE6\"};"],"sourceRoot":""}